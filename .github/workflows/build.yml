name: Build Chromaprint FFmpeg

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

env:
  CHROMAPRINT_VERSION: 1.6.0
  RELEASE_SUFFIX: custom
  FFMPEG_CHANNEL: master-latest
  FFMPEG_RELEASE_PATH: https://github.com/BtbN/FFmpeg-Builds/releases/latest/download
  FFMPEG_VERSION: 6.1.1

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 下载 FFmpeg SDK (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $channel = "${{ env.FFMPEG_CHANNEL }}"
          $baseUrl = "${{ env.FFMPEG_RELEASE_PATH }}"
          $zipName = "ffmpeg-$channel-win64-lgpl-shared.zip"
          $url = "$baseUrl/$zipName"
          Invoke-WebRequest $url -OutFile $zipName
          Expand-Archive $zipName -DestinationPath ffmpeg-win64 -Force
          $pkgDir = Get-ChildItem ffmpeg-win64 -Directory | Select-Object -First 1
          if (-not $pkgDir) {
            throw "未找到 FFmpeg 解压目录"
          }
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/include" -Force | Out-Null
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/lib" -Force | Out-Null
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/bin" -Force | Out-Null
          Copy-Item -Path (Join-Path $pkgDir.FullName "include/*") -Destination "third_party/ffmpeg/win64/include/" -Recurse -Force
          Copy-Item -Path (Join-Path $pkgDir.FullName "lib/*") -Destination "third_party/ffmpeg/win64/lib/" -Recurse -Force
          Get-ChildItem (Join-Path $pkgDir.FullName "bin") -Filter *.dll | ForEach-Object {
            Copy-Item $_.FullName "third_party/ffmpeg/win64/bin/" -Force
          }

      - name: 配置 FFmpeg 路径
        shell: pwsh
        run: echo "FFMPEG_ROOT=${{ github.workspace }}\third_party\ffmpeg\win64" >> $Env:GITHUB_ENV

      - name: CMake Configure
        shell: pwsh
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF -DFFT_LIB=ffmpeg

      - name: CMake Build
        shell: pwsh
        run: cmake --build build --config Release --target chromaprint

      - name: CMake Install
        shell: pwsh
        run: cmake --install build --config Release --prefix "${{ github.workspace }}\install"

      - name: 打包产物
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          if (Test-Path install\bin\chromaprint.dll) {
            Copy-Item install\bin\chromaprint.dll artifacts\chromaprint.dll -Force
          }
          if (Test-Path install\lib\chromaprint.lib) {
            Copy-Item install\lib\chromaprint.lib artifacts\chromaprint.lib -Force
          }
          if (Test-Path install\bin\chromaprint.pdb) {
            Copy-Item install\bin\chromaprint.pdb artifacts\chromaprint.pdb -Force
          }

      - name: 上传 Windows 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-windows-x64
          path: artifacts

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 准备构建依赖
        run: |
          set -euo pipefail
          brew update
          brew install nasm pkg-config yasm

      - name: 构建 FFmpeg SDK (macOS Universal)
        run: |
          set -euo pipefail
          VERSION="${FFMPEG_VERSION}"
          SRC_TAR="ffmpeg-${VERSION}.tar.bz2"
          curl -L -o "$SRC_TAR" "https://ffmpeg.org/releases/$SRC_TAR"
          tar xf "$SRC_TAR"
          SRC_DIR="ffmpeg-${VERSION}"
          SDK_PATH="$(xcrun --sdk macosx --show-sdk-path)"
          export MACOSX_DEPLOYMENT_TARGET=11.0

          build_ffmpeg() {
            ARCH="$1"
            PREFIX="$2"
            HOST_TRIPLE="$3"
            HOST_CXX="$4"
            mkdir -p "build-$ARCH"
            pushd "build-$ARCH"
            CONFIGURE_CMD=("../$SRC_DIR/configure" \
              --prefix="$PREFIX" \
              --enable-shared \
              --disable-static \
              --disable-doc \
              --disable-programs \
              --target-os=darwin \
              --arch="$ARCH" \
              --host="$HOST_TRIPLE" \
              --cc="$(xcrun --find clang)" \
              --cxx="$HOST_CXX" \
              --extra-cflags="-arch $ARCH -isysroot $SDK_PATH -mmacosx-version-min=${MACOSX_DEPLOYMENT_TARGET}" \
              --extra-ldflags="-arch $ARCH -isysroot $SDK_PATH -mmacosx-version-min=${MACOSX_DEPLOYMENT_TARGET}" \
              --pkg-config-flags="--define-prefix")
            "${CONFIGURE_CMD[@]}"
            make -j"$(sysctl -n hw.ncpu)"
            make install
            popd
          }

          build_ffmpeg arm64 "$PWD/ffmpeg-install-arm64" aarch64-apple-darwin "$(xcrun --find clang++)"
          build_ffmpeg x86_64 "$PWD/ffmpeg-install-x86_64" x86_64-apple-darwin "$(xcrun --find clang++)"

          mkdir -p third_party/ffmpeg/macos/include third_party/ffmpeg/macos/lib
          rsync -a ffmpeg-install-arm64/include/ third_party/ffmpeg/macos/include/

          for lib in libavcodec libavformat libavutil libswresample libswscale; do
            lipo -create \
              "ffmpeg-install-arm64/lib/${lib}.dylib" \
              "ffmpeg-install-x86_64/lib/${lib}.dylib" \
              -output "third_party/ffmpeg/macos/lib/${lib}.dylib"
          done
          chmod 755 third_party/ffmpeg/macos/lib/*.dylib

      - name: 配置 FFmpeg 路径
        run: echo "FFMPEG_ROOT=${{ github.workspace }}/third_party/ffmpeg/macos" >> $GITHUB_ENV

      - name: CMake Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF -DFFT_LIB=ffmpeg -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config Release --target chromaprint

      - name: CMake Install
        run: cmake --install build --config Release --prefix "${{ github.workspace }}/install"

      - name: 打包产物
        run: |
          mkdir -p artifacts
          if [ -f install/lib/libchromaprint.dylib ]; then cp install/lib/libchromaprint.dylib artifacts/; fi
          if [ -f install/lib/libchromaprint.a ]; then cp install/lib/libchromaprint.a artifacts/; fi

      - name: 上传 macOS 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-macos-universal
          path: artifacts

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-macos
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 下载 Windows 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-windows-x64
          path: dist/windows

      - name: 下载 macOS 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-macos-universal
          path: dist/macos

      - name: 设置版本号
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 创建发布包
        run: |
          set -euo pipefail
          mkdir -p artifacts release
          VERSION_NAME="${VERSION:-${CHROMAPRINT_VERSION}}"
          SUFFIX="${RELEASE_SUFFIX}"

          WIN_DIR="chromaprint-${VERSION_NAME}-${SUFFIX}-win64"
          mkdir -p "release/${WIN_DIR}"
          cp dist/windows/* "release/${WIN_DIR}/"
          (cd release && zip -r "../artifacts/${WIN_DIR}.zip" "${WIN_DIR}")

          MAC_DIR="chromaprint-${VERSION_NAME}-${SUFFIX}-macos-universal"
          mkdir -p "release/${MAC_DIR}"
          cp dist/macos/* "release/${MAC_DIR}/"
          tar czf "artifacts/${MAC_DIR}.tar.gz" -C release "${MAC_DIR}"

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

