name: Build Chromaprint FFmpeg

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

env:
  CHROMAPRINT_VERSION: 1.6.0
  RELEASE_SUFFIX: custom
  FFMPEG_CHANNEL: master-latest
  FFMPEG_RELEASE_PATH: https://github.com/BtbN/FFmpeg-Builds/releases/latest/download
  FFMPEG_VERSION: 6.1.1

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 下载 FFmpeg SDK (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $channel = "${{ env.FFMPEG_CHANNEL }}"
          $baseUrl = "${{ env.FFMPEG_RELEASE_PATH }}"
          $zipName = "ffmpeg-$channel-win64-lgpl-shared.zip"
          $url = "$baseUrl/$zipName"
          Invoke-WebRequest $url -OutFile $zipName
          Expand-Archive $zipName -DestinationPath ffmpeg-win64 -Force
          $pkgDir = Get-ChildItem ffmpeg-win64 -Directory | Select-Object -First 1
          if (-not $pkgDir) {
            throw "未找到 FFmpeg 解压目录"
          }
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/include" -Force | Out-Null
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/lib" -Force | Out-Null
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/bin" -Force | Out-Null
          Copy-Item -Path (Join-Path $pkgDir.FullName "include/*") -Destination "third_party/ffmpeg/win64/include/" -Recurse -Force
          Copy-Item -Path (Join-Path $pkgDir.FullName "lib/*") -Destination "third_party/ffmpeg/win64/lib/" -Recurse -Force
          Get-ChildItem (Join-Path $pkgDir.FullName "bin") -Filter *.dll | ForEach-Object {
            Copy-Item $_.FullName "third_party/ffmpeg/win64/bin/" -Force
          }

      - name: 验证 FFmpeg SDK 结构
        shell: pwsh
        run: |
          Write-Host "检查 FFmpeg SDK 目录结构..."
          Write-Host "`n=== Include 目录 ==="
          Get-ChildItem third_party\ffmpeg\win64\include -Recurse -File | Select-Object -First 20 FullName
          Write-Host "`n=== Lib 目录 ==="
          Get-ChildItem third_party\ffmpeg\win64\lib | Select-Object FullName
          Write-Host "`n=== 检查关键头文件 ==="
          Test-Path third_party\ffmpeg\win64\include\libavcodec\avcodec.h
          Test-Path third_party\ffmpeg\win64\include\libavcodec\avfft.h
          
      - name: 配置 FFmpeg 路径
        shell: pwsh
        run: |
          $ffmpegRoot = "${{ github.workspace }}\third_party\ffmpeg\win64"
          echo "FFMPEG_ROOT=$ffmpegRoot" >> $Env:GITHUB_ENV
          echo "FFmpeg_ROOT=$ffmpegRoot" >> $Env:GITHUB_ENV

      - name: CMake Configure
        shell: pwsh
        run: |
          $ffmpegRoot = "${{ github.workspace }}\third_party\ffmpeg\win64"
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_TESTS=OFF `
            -DBUILD_TOOLS=OFF `
            -DFFT_LIB=ffmpeg `
            -DFFMPEG_ROOT="$ffmpegRoot"

      - name: CMake Build
        shell: pwsh
        run: cmake --build build --config Release --target chromaprint

      - name: CMake Install
        shell: pwsh
        run: cmake --install build --config Release --prefix "${{ github.workspace }}\install"

      - name: 打包产物
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          
          # 复制 chromaprint 产物
          if (Test-Path install\bin\chromaprint.dll) {
            Copy-Item install\bin\chromaprint.dll artifacts\chromaprint.dll -Force
          }
          if (Test-Path install\lib\chromaprint.lib) {
            Copy-Item install\lib\chromaprint.lib artifacts\chromaprint.lib -Force
          }
          if (Test-Path install\bin\chromaprint.pdb) {
            Copy-Item install\bin\chromaprint.pdb artifacts\chromaprint.pdb -Force
          }
          
          # 复制 FFmpeg 运行时 DLL（关键！）
          $ffmpegBin = "third_party\ffmpeg\win64\bin"
          if (Test-Path $ffmpegBin) {
            Write-Host "复制 FFmpeg 运行时 DLL..."
            Get-ChildItem $ffmpegBin -Filter *.dll | ForEach-Object {
              Copy-Item $_.FullName "artifacts\" -Force
              Write-Host "  已复制: $($_.Name)"
            }
          }
          
          Write-Host "`n最终产物列表:"
          Get-ChildItem artifacts | Select-Object Name, Length

      - name: 上传 Windows 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-windows-x64
          path: artifacts

  build-macos-arm64:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 安装并准备 FFmpeg SDK (macOS arm64)
        run: |
          set -euo pipefail
          brew install ffmpeg
          FFMPEG_PREFIX=$(brew --prefix ffmpeg)
          
          echo "=== Homebrew FFmpeg 结构 ==="
          echo "FFmpeg prefix: $FFMPEG_PREFIX"
          echo -e "\n=== Include 目录 ==="
          ls -la "$FFMPEG_PREFIX/include/" | head -20
          echo -e "\n=== Lib 目录 ==="
          ls -la "$FFMPEG_PREFIX/lib/" | grep -E "\.(dylib|a)$" | head -20
          echo -e "\n=== 检查关键头文件 ==="
          test -f "$FFMPEG_PREFIX/include/libavcodec/avcodec.h" && echo "✓ avcodec.h 存在" || echo "✗ avcodec.h 不存在"
          test -f "$FFMPEG_PREFIX/include/libavcodec/avfft.h" && echo "✓ avfft.h 存在" || echo "✗ avfft.h 不存在"
          
          mkdir -p third_party/ffmpeg/macos/include third_party/ffmpeg/macos/lib
          rsync -a "$FFMPEG_PREFIX/include/" third_party/ffmpeg/macos/include/
          for lib in libavcodec libavformat libavutil libswresample libswscale libavfilter libavdevice; do
            cp "$FFMPEG_PREFIX/lib/${lib}"*.dylib third_party/ffmpeg/macos/lib/ 2>/dev/null || true
          done
          chmod 755 third_party/ffmpeg/macos/lib/*.dylib
          
          echo -e "\n=== 复制后的目录结构 ==="
          ls -la third_party/ffmpeg/macos/include/ | head -20
          ls -la third_party/ffmpeg/macos/lib/
          file third_party/ffmpeg/macos/lib/libavcodec*.dylib | head -1

      - name: CMake Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF -DFFT_LIB=ffmpeg -DCMAKE_OSX_ARCHITECTURES="arm64" -DFFMPEG_ROOT="${{ github.workspace }}/third_party/ffmpeg/macos"

      - name: CMake Build
        run: cmake --build build --config Release --target chromaprint

      - name: CMake Install
        run: cmake --install build --config Release --prefix "${{ github.workspace }}/install"

      - name: 打包产物
        run: |
          mkdir -p artifacts
          
          # 复制 chromaprint 库
          if [ -f install/lib/libchromaprint.dylib ]; then 
            cp install/lib/libchromaprint.dylib artifacts/libchromaprint.dylib
            file artifacts/libchromaprint.dylib
          fi
          
          # 复制 FFmpeg 运行时 dylib（关键！）
          echo -e "\n复制 FFmpeg 运行时 dylib..."
          FFMPEG_LIB="third_party/ffmpeg/macos/lib"
          if [ -d "$FFMPEG_LIB" ]; then
            for lib in "$FFMPEG_LIB"/*.dylib; do
              if [ -f "$lib" ]; then
                cp "$lib" artifacts/
                echo "  已复制: $(basename $lib)"
              fi
            done
          fi
          
          echo -e "\n最终产物列表:"
          ls -lh artifacts/

      - name: 上传 macOS arm64 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-macos-arm64
          path: artifacts

  build-macos-x86_64:
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 安装并准备 FFmpeg SDK (macOS x86_64)
        run: |
          set -euo pipefail
          brew install ffmpeg
          FFMPEG_PREFIX=$(brew --prefix ffmpeg)
          
          echo "=== Homebrew FFmpeg 结构 ==="
          echo "FFmpeg prefix: $FFMPEG_PREFIX"
          echo -e "\n=== Include 目录 ==="
          ls -la "$FFMPEG_PREFIX/include/" | head -20
          echo -e "\n=== Lib 目录 ==="
          ls -la "$FFMPEG_PREFIX/lib/" | grep -E "\.(dylib|a)$" | head -20
          echo -e "\n=== 检查关键头文件 ==="
          test -f "$FFMPEG_PREFIX/include/libavcodec/avcodec.h" && echo "✓ avcodec.h 存在" || echo "✗ avcodec.h 不存在"
          test -f "$FFMPEG_PREFIX/include/libavcodec/avfft.h" && echo "✓ avfft.h 存在" || echo "✗ avfft.h 不存在"
          
          mkdir -p third_party/ffmpeg/macos/include third_party/ffmpeg/macos/lib
          rsync -a "$FFMPEG_PREFIX/include/" third_party/ffmpeg/macos/include/
          for lib in libavcodec libavformat libavutil libswresample libswscale libavfilter libavdevice; do
            cp "$FFMPEG_PREFIX/lib/${lib}"*.dylib third_party/ffmpeg/macos/lib/ 2>/dev/null || true
          done
          chmod 755 third_party/ffmpeg/macos/lib/*.dylib
          
          echo -e "\n=== 复制后的目录结构 ==="
          ls -la third_party/ffmpeg/macos/include/ | head -20
          ls -la third_party/ffmpeg/macos/lib/
          file third_party/ffmpeg/macos/lib/libavcodec*.dylib | head -1

      - name: CMake Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF -DFFT_LIB=ffmpeg -DCMAKE_OSX_ARCHITECTURES="x86_64" -DFFMPEG_ROOT="${{ github.workspace }}/third_party/ffmpeg/macos"

      - name: CMake Build
        run: cmake --build build --config Release --target chromaprint

      - name: CMake Install
        run: cmake --install build --config Release --prefix "${{ github.workspace }}/install"

      - name: 打包产物
        run: |
          mkdir -p artifacts
          
          # 复制 chromaprint 库
          if [ -f install/lib/libchromaprint.dylib ]; then 
            cp install/lib/libchromaprint.dylib artifacts/libchromaprint.dylib
            file artifacts/libchromaprint.dylib
          fi
          
          # 复制 FFmpeg 运行时 dylib（关键！）
          echo -e "\n复制 FFmpeg 运行时 dylib..."
          FFMPEG_LIB="third_party/ffmpeg/macos/lib"
          if [ -d "$FFMPEG_LIB" ]; then
            for lib in "$FFMPEG_LIB"/*.dylib; do
              if [ -f "$lib" ]; then
                cp "$lib" artifacts/
                echo "  已复制: $(basename $lib)"
              fi
            done
          fi
          
          echo -e "\n最终产物列表:"
          ls -lh artifacts/

      - name: 上传 macOS x86_64 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-macos-x86_64
          path: artifacts

  build-macos-universal:
    runs-on: macos-latest
    needs:
      - build-macos-arm64
      - build-macos-x86_64
    steps:
      - name: 下载 arm64 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-macos-arm64
          path: arm64

      - name: 下载 x86_64 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-macos-x86_64
          path: x86_64

      - name: 创建 Universal Binary
        run: |
          mkdir -p artifacts
          
          # 合并 chromaprint
          lipo -create arm64/libchromaprint.dylib x86_64/libchromaprint.dylib -output artifacts/libchromaprint.dylib
          lipo -info artifacts/libchromaprint.dylib
          file artifacts/libchromaprint.dylib
          
          # 合并 FFmpeg 运行时库（关键！）
          echo -e "\n合并 FFmpeg 运行时 dylib..."
          for arm_lib in arm64/*.dylib; do
            lib_name=$(basename "$arm_lib")
            # 跳过 chromaprint
            if [ "$lib_name" = "libchromaprint.dylib" ]; then
              continue
            fi
            
            x64_lib="x86_64/$lib_name"
            if [ -f "$x64_lib" ]; then
              echo "  合并: $lib_name"
              lipo -create "$arm_lib" "$x64_lib" -output "artifacts/$lib_name"
              lipo -info "artifacts/$lib_name"
            else
              echo "  警告: $lib_name 只有 arm64 版本，直接复制"
              cp "$arm_lib" "artifacts/$lib_name"
            fi
          done
          
          echo -e "\n最终 Universal 产物列表:"
          ls -lh artifacts/
          echo -e "\n验证架构:"
          for lib in artifacts/*.dylib; do
            echo "$(basename $lib): $(lipo -info $lib | cut -d: -f3)"
          done

      - name: 上传 macOS Universal 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-macos-universal
          path: artifacts

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-macos-universal
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 下载 Windows 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-windows-x64
          path: dist/windows

      - name: 下载 macOS 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-macos-universal
          path: dist/macos

      - name: 设置版本号
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 创建发布包
        run: |
          set -euo pipefail
          mkdir -p artifacts release
          VERSION_NAME="${VERSION:-${CHROMAPRINT_VERSION}}"
          SUFFIX="${RELEASE_SUFFIX}"

          WIN_DIR="chromaprint-${VERSION_NAME}-${SUFFIX}-win64"
          mkdir -p "release/${WIN_DIR}"
          cp dist/windows/* "release/${WIN_DIR}/"
          (cd release && zip -r "../artifacts/${WIN_DIR}.zip" "${WIN_DIR}")

          MAC_DIR="chromaprint-${VERSION_NAME}-${SUFFIX}-macos-universal"
          mkdir -p "release/${MAC_DIR}"
          cp dist/macos/* "release/${MAC_DIR}/"
          tar czf "artifacts/${MAC_DIR}.tar.gz" -C release "${MAC_DIR}"

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

