name: Build Chromaprint FFmpeg

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

env:
  CHROMAPRINT_VERSION: 1.6.0
  RELEASE_SUFFIX: custom

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 下载 FFmpeg SDK (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $headers = @{ "User-Agent" = "chromaprint-build" }
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest" -Headers $headers
          $asset = $release.assets | Where-Object { $_.name -like "ffmpeg-*-win64-lgpl-shared.zip" } | Select-Object -First 1
          if (-not $asset) {
            throw "未在最新 Release 中找到 win64 LGPL shared 资源"
          }
          $zipName = $asset.name
          Invoke-WebRequest $asset.browser_download_url -OutFile $zipName -Headers $headers
          Expand-Archive $zipName -DestinationPath ffmpeg-win64 -Force
          $pkgDir = Get-ChildItem ffmpeg-win64 -Directory | Select-Object -First 1
          if (-not $pkgDir) {
            throw "未找到 FFmpeg 解压目录"
          }
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/include" -Force | Out-Null
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/lib" -Force | Out-Null
          New-Item -ItemType Directory -Path "third_party/ffmpeg/win64/bin" -Force | Out-Null
          Copy-Item -Path (Join-Path $pkgDir.FullName "include/*") -Destination "third_party/ffmpeg/win64/include/" -Recurse -Force
          Copy-Item -Path (Join-Path $pkgDir.FullName "lib/*") -Destination "third_party/ffmpeg/win64/lib/" -Recurse -Force
          Get-ChildItem (Join-Path $pkgDir.FullName "bin") -Filter *.dll | ForEach-Object {
            Copy-Item $_.FullName "third_party/ffmpeg/win64/bin/" -Force
          }

      - name: 配置 FFmpeg 路径
        shell: pwsh
        run: echo "FFMPEG_ROOT=${{ github.workspace }}\third_party\ffmpeg\win64" >> $Env:GITHUB_ENV

      - name: CMake Configure
        shell: pwsh
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF -DFFT_LIB=ffmpeg

      - name: CMake Build
        shell: pwsh
        run: cmake --build build --config Release --target chromaprint

      - name: CMake Install
        shell: pwsh
        run: cmake --install build --config Release --prefix "${{ github.workspace }}\install"

      - name: 打包产物
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          if (Test-Path install\bin\chromaprint.dll) {
            Copy-Item install\bin\chromaprint.dll artifacts\chromaprint.dll -Force
          }
          if (Test-Path install\lib\chromaprint.lib) {
            Copy-Item install\lib\chromaprint.lib artifacts\chromaprint.lib -Force
          }
          if (Test-Path install\bin\chromaprint.pdb) {
            Copy-Item install\bin\chromaprint.pdb artifacts\chromaprint.pdb -Force
          }

      - name: 上传 Windows 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-windows-x64
          path: artifacts

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 下载 FFmpeg SDK (macOS)
        run: |
          set -euo pipefail
          python3 <<'PY'
import json
import os
import sys
import urllib.request
import zipfile

UA = {"User-Agent": "chromaprint-build"}
req = urllib.request.Request("https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest", headers=UA)
with urllib.request.urlopen(req) as resp:
    release = json.load(resp)

assets = {asset["name"]: asset["browser_download_url"] for asset in release.get("assets", [])}

targets = {
    "arm": "macos11-arm64-lgpl-shared.zip",
    "x64": "macos11-x86_64-lgpl-shared.zip",
}

downloaded = {}
for key, suffix in targets.items():
    matches = [name for name in assets if name.endswith(suffix)]
    if not matches:
        print(f"未找到 {suffix} 资源", file=sys.stderr)
        sys.exit(1)
    name = matches[0]
    url = assets[name]
    print(f"下载 {name}")
    with urllib.request.urlopen(urllib.request.Request(url, headers=UA)) as r, open(name, "wb") as f:
        f.write(r.read())
    downloaded[key] = name

def extract(zip_name, target_dir):
    with zipfile.ZipFile(zip_name) as z:
        top_level = None
        for m in z.namelist():
            parts = m.split("/")
            if len(parts) <= 1:
                continue
            top_level = parts[0]
            break
        if top_level is None:
            raise RuntimeError(f"{zip_name} 缺少预期的顶层目录")
        z.extractall(path=target_dir)
        return os.path.join(target_dir, top_level)

arm_dir = extract(downloaded["arm"], "ffmpeg-arm64")
x64_dir = extract(downloaded["x64"], "ffmpeg-x86_64")

with open("ffmpeg-dirs.txt", "w", encoding="utf-8") as f:
    f.write(f"ARM_DIR={arm_dir}\n")
    f.write(f"X64_DIR={x64_dir}\n")
PY
          source ffmpeg-dirs.txt
          mkdir -p third_party/ffmpeg/macos/include third_party/ffmpeg/macos/lib
          rsync -a "$ARM_DIR/include/" third_party/ffmpeg/macos/include/
          for lib in libavcodec libavformat libavutil libswresample libswscale; do
            lipo -create "$ARM_DIR/lib/${lib}.dylib" "$X64_DIR/lib/${lib}.dylib" -output "third_party/ffmpeg/macos/lib/${lib}.dylib"
          done
          chmod 755 third_party/ffmpeg/macos/lib/*.dylib

      - name: 配置 FFmpeg 路径
        run: echo "FFMPEG_ROOT=${{ github.workspace }}/third_party/ffmpeg/macos" >> $GITHUB_ENV

      - name: CMake Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF -DFFT_LIB=ffmpeg -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config Release --target chromaprint

      - name: CMake Install
        run: cmake --install build --config Release --prefix "${{ github.workspace }}/install"

      - name: 打包产物
        run: |
          mkdir -p artifacts
          if [ -f install/lib/libchromaprint.dylib ]; then cp install/lib/libchromaprint.dylib artifacts/; fi
          if [ -f install/lib/libchromaprint.a ]; then cp install/lib/libchromaprint.a artifacts/; fi

      - name: 上传 macOS 构建
        uses: actions/upload-artifact@v4
        with:
          name: chromaprint-macos-universal
          path: artifacts

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-macos
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 下载 Windows 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-windows-x64
          path: dist/windows

      - name: 下载 macOS 构建
        uses: actions/download-artifact@v4
        with:
          name: chromaprint-macos-universal
          path: dist/macos

      - name: 设置版本号
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 创建发布包
        run: |
          set -euo pipefail
          mkdir -p artifacts release
          VERSION_NAME="${VERSION:-${CHROMAPRINT_VERSION}}"
          SUFFIX="${RELEASE_SUFFIX}"

          WIN_DIR="chromaprint-${VERSION_NAME}-${SUFFIX}-win64"
          mkdir -p "release/${WIN_DIR}"
          cp dist/windows/* "release/${WIN_DIR}/"
          (cd release && zip -r "../artifacts/${WIN_DIR}.zip" "${WIN_DIR}")

          MAC_DIR="chromaprint-${VERSION_NAME}-${SUFFIX}-macos-universal"
          mkdir -p "release/${MAC_DIR}"
          cp dist/macos/* "release/${MAC_DIR}/"
          tar czf "artifacts/${MAC_DIR}.tar.gz" -C release "${MAC_DIR}"

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

